@model AmpRageRepo.Models.Path


@{
    ViewData["Title"] = "DisplayPath";
    Layout = "_Layout2";
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #dvMap {
        height: 100%;
    }

    .ShowRouteBtn {
        background-Color: #fff;
        border: 2px solid #fff;
        border-Radius: 3px;
        box-Shadow: 0 2px 6px rgba(0,0,0,.3);
        cursor: pointer;
        text-Align: left;
        color: rgb(25,25,25);
        font-Family: Roboto,Arial,sans-seri;
        font-weight: bold;
        font-Size: 16px;
        line-Height: 32px;
        padding-Left: 10px;
        padding-Right: 10px;
    }
</style>

<div id="dvMap"></div>

<div id="descriptionPanel" style="margin: 10px">
    <div class="container-fluid">
        @*<div id="floating-panel">*@
        <div class="dropdown">
            <button class="btn ShowRouteBtn" data-toggle="collapse" href="#" data-target="#demo"><span>Visa rutt ▼</span></button>
            <div id ="demo" class="dropdown-menu" style="opacity: 0.7; font-size: large; width: 1300px;">

                <div class="row">
                    <div id="directions_panel" class="col-sm-4 col-lg-4">
                        Tid
                    </div>
                    <div id="time" class="col-sm-2 col-lg-2">
                        Restid<br />
                    </div>
                    <div id="chargetime" class="col-sm-2 col-lg-2">
                        Laddningstid<br />
                    </div>
                    <div id="range" class="col-sm-2 col-lg-2">
                        Avstånd<br />
                    </div>
                    <div id="emissions" class="col-sm-2 col-lg-2">
                        Utsläpp<br />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="returnDiv" style="margin: 10px">
        <a class="btn ShowRouteBtn" asp-area="" asp-controller="Path" asp-action="CreatePath"><span class="bigger">◄ Ny sökning</span></a>
    </div>

</div>

<div class="">

    <p hidden id="origin">"@Model.Origin"</p>
    <p hidden id="dest">"@Model.Destination"</p>

    <ul hidden id="wps">
        @if (Model.IgnoreRange == false)
        {
            @foreach (var item in Model.WayPointStrings)
            {
                <li>
                    @Html.Raw(item)
                </li>
            }
        }
    </ul>

</div>



@section scripts{

    <!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBhIgKBChJZ9HwlAS5FdKkMFKuneDc8RjY"
            type="text/javascript"
            charset="utf-8">
    </script>

    <!-- code for example 1 -->
    <script charset="utf-8">

        var source, destination;
        var locations = [];
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        // initialise the location of the map on Chichester in England (ref lat and lng)
        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 62, lng: 17 },
            zoom: 7,
            mapTypeId: 'roadmap',
            mapTypeControl: false,
        }
        );

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(document.getElementById('descriptionPanel'));
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(document.getElementById('returnDiv'));

        google.maps.event.addDomListener(window, 'load', function () {
            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
            GetRoute();
        });



        function GetRoute() {

            directionsDisplay.setMap(map);

            var ul = document.getElementById("wps");
            var items = ul.getElementsByTagName("li");

            var wayPoints = [];
            var chargeTimes = [];
            var emissions = [];

            @foreach (var item in Model.ChargeTimes)
            {
                @:chargeTimes.push("@item");
            };
            @foreach (var item in Model.Emissions)
            {
                @:emissions.push("@item");
            };


            for (var i = 0; i < items.length; ++i) {
                var string = items[i].textContent;
                console.log(string);
                wayPoints.push({ location: string, stopover: true });
            }

            var request = {
                origin: document.getElementById('origin').textContent,
                destination: document.getElementById('dest').textContent,
                waypoints: wayPoints, //an array of waypoints
                optimizeWaypoints: true, //set to true if you want google to determine the shortest route or false to use the order specified.
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                    var route = response.routes[0];
                    var summaryPanel = document.getElementById("directions_panel");
                    var summaryPanell = document.getElementById("time");
                    var summaryPanelll = document.getElementById("range");
                    var summaryPanellll = document.getElementById("chargetime");
                    var summaryPanelllll = document.getElementById("emissions");

                    summaryPanel.innerHTML = "";
                    //summaryPanel.innerHTML += "<b>Tid" + "<b>längd" + "</b><br/>";
                    // For each route, display summary information.
                    for (var i = 0; i < route.legs.length; i++) {
                        var routeSegment = i + 1;
                        //summaryPanel.innerHTML += "<b>Ruttdel: " + routeSegment + "</b><br />";
                        summaryPanel.innerHTML += "▼" + route.legs[i].start_address +    "<br />"; /*+ route.legs[i].duration.text + "\t" + route.legs[i].distance.text + "<br/>"*/
                        summaryPanell.innerHTML += route.legs[i].duration.text + "<br/>";
                        summaryPanelll.innerHTML += route.legs[i].distance.text + "<br/>";
                        summaryPanellll.innerHTML += chargeTimes[i] + "<br/>";
                        summaryPanelllll.innerHTML += emissions[i] + "<br/>";

                        if (i == route.legs.length - 1) {

                            summaryPanel.innerHTML += "►" + route.legs[i].end_address + "<br />";
                        }
                    }
                    computeTotalDistance(response);
                } else {
                    alert("directions response " + status);
                }
                //directionsDisplay.setPanel(document.getElementById('demo'));
            });
        }
        function computeTotalDistance(result) {
            var totalDist = 0;
            var totalTime = 0;
            var totalMin = 0;
            var totalHour = 0;

            var myroute = result.routes[0];
            for (i = 0; i < myroute.legs.length; i++) {
                totalDist += myroute.legs[i].distance.value;
                totalTime += myroute.legs[i].duration.value;
            }
            totalDist = totalDist / 1000.

            var totalHour = Math.floor(totalTime / (60 * 60));
            totalTime -= totalHour * (60 * 60);
            var totalMin = Math.floor(totalTime / (60));
            totalTime -= totalMin * (60);


            //document.getElementById("directions_panel").innerHTML += "Totala sträckan är: " + totalDist.toFixed(0) + " km<br>Totala tiden: " + totalHour + " tim " + totalMin + " min " + "</br>";
            document.getElementById("time").innerHTML += "</br>" +  totalHour + " tim " + totalMin + " min " + "</br>";
            document.getElementById("range").innerHTML += "</br>" + totalDist.toFixed(0) + " km<br>";

        }

    </script>
    <!-- end code for example 1 -->
}
